import logging
import boto3
from botocore.exceptions import ClientError
import os
import pandas as pd 
from io import StringIO

####Existing Buckets####################

s3=boto3.client('s3')
response=s3.list_buckets()
print("Existing Buckets :")
for bucket in response['Buckets']:
    print(bucket['Name'])

####Upload file to a bucket##############

def upload_file(file_name, bucket, object_name=None):
    """Upload a file to an S3 bucket

    :param file_name: File to upload
    :param bucket: Bucket to upload to
    :param object_name: S3 object name. If not specified then file_name is used
    :return: True if file was uploaded, else False
    """

    # If S3 object_name was not specified, use file_name
    if object_name is None:
        object_name = os.path.basename(file_name)

    # Upload the file
    s3_client = boto3.client('s3')
    try:
        response = s3_client.upload_file(file_name, bucket, object_name)
    except ClientError as e:
        logging.error(e)
        return False
    return True


s3_bucket="karthik-data-eng-train"
file_name="C:/Users/003RF4744/Downloads/tmdb_5000_movies.csv"
file="tmdb_5000_movies.csv"

##with open(file_name,"rb") as f:
##    s3.upload_fileobj(f,s3_bucket,file)

####################################################################################

'''
obj=s3.get_object(Bucket=s3_bucket,Key=file)
data=obj['Body'].read().decode('utf-8')

df=pd.read_csv(StringIO(data))

'''



# Create a DynamoDB client
dynamodb = boto3.client('dynamodb', region_name='ap-south-1')

# Define the table schema
table_definition = {
    "TableName": "Movies",
    "AttributeDefinitions": [
        {
            "AttributeName": "id",
            "AttributeType": "S"
        }
    ],
    "KeySchema": [
        {
            "AttributeName": "id",
            "KeyType": "HASH"
        }
    ],
    "ProvisionedThroughput": {
        "ReadCapacityUnits": 5,
        "WriteCapacityUnits": 5
    }
}


# Create the table
def create_table():
    try:
        response = dynamodb.create_table(**table_definition)
        print("Table creation started. Waiting for the table to be active...")
        waiter = dynamodb.get_waiter('table_exists')
        waiter.wait(TableName='Movies')
        print("Table is now active.")
    except Exception as e:
        print(f"Error creating table: {e}")
		
		
##if __name__ == "__main__":
##    create_table()
    



